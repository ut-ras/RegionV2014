#!/usr/bin/env python2

import math
import numpy
import cv2
import cv

import rospy
import roslib
from roslib import message

import sensor_msgs.point_cloud2 as pc2
from sensor_msgs.msg import PointCloud2
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from driving.msg import Drive


bridge = CvBridge()

image_pub = None
mec_pub = None

res = 256
width = res
height = res

def uangle(a, b):
    r = -math.atan2(-a[1]*b[0] + a[0]*b[1], 
                    numpy.dot(a, b))

    if r > PI2: r = PI - r
    if r < -PI2: r = -PI - r
    
    return (PI2 - abs(r))/PI2


def lidar_cb(data):
    global image_pub
    global mec_pub
    global bridge
    global prev
    global prevd, preva
    global pweight
    global kweight
    global kd, ka

    def w(x): return int(res * (1.0-x/0.6))
    def h(y): return int(res * (0.5-y/2))

    img = numpy.zeros((width,height,1), numpy.uint8)
    out = numpy.zeros((width,height,3), numpy.uint8)

    points = [(x,y) for x,y,_,_ in pc2.read_points(data)]

    for x,y in ((w(x),h(y)) for x,y in points):
        if x+1 < width and y+1 < height and x >= 0 and y >= 0:
            img[x,y] = 255

    lines = cv2.HoughLinesP(img, 1, PI/180, 5)

    # mline now contains our target line
    a = numpy.array([float(mline[0]), float(mline[1])])
    n = numpy.array([float(mline[2]-mline[0]), float(mline[3]-mline[1])])
    n = n/numpy.linalg.norm(n)

    p = (res/2, res)

#    y = (float(mline[3]-mline[1]) / float(mline[2]-mline[0])) * (res/2) + mline[1]
#    prevd = height - y

    dist = numpy.subtract(a,p)
    dist = numpy.subtract(dist, numpy.dot(dist, n) * n)
    prevd = numpy.linalg.norm(dist)

    preva = math.atan2(n[1], n[0])

    errd = kd * (prevd-25)
    erra = ka * preva


    # chere
    mec_pub.publish(Drive(0.75, errd, erra, 0))
    image_pub.publish(bridge.cv_to_imgmsg(cv.fromarray(out), "bgr8"))


def main():
    global image_pub
    global mec_pub
    global prev
    global prevd
    global pweight
    global kweight
    global kd, ka

    rospy.init_node('lidarnav')

    rospy.Subscriber('cloud', PointCloud2, lidar_cb)
    image_pub = rospy.Publisher('lidarnav/image', Image)

    while not rospy.is_shutdown():
        rospy.sleep(1)


if __name__ == "__main__":
    main()
