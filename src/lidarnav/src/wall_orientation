#!/usr/bin/env python2

import math
import numpy
import cv2
import cv

import rospy
import roslib
from roslib import message

import sensor_msgs.point_cloud2 as pc2
from sensor_msgs.msg import PointCloud2
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from lidarnav.msg import WallState


bridge = CvBridge()

image_pub = None
state_pub = None

res = 128
height = res
width = res*2

DIALATE = (30,3)

pweight = None
kweight = None

prev = None
prevd = None
preva = None

PI = math.pi
PI2 = math.pi/2

debug = False


def uangle(a, b):
    r = -math.atan2(-a[1]*b[0] + a[0]*b[1], 
                    numpy.dot(a, b))

    if r > PI2: r = PI - r
    if r < -PI2: r = -PI - r
    
    return (PI2 - abs(r))/PI2


def lidar_cb(data):
    global bridge
    global prev
    global prevd, preva
    global pweight
    global kweight

    def w(x): return int(res * (.6-x))
    def h(y): return int(res * (1.0-y))

    img = numpy.zeros((height,width,1), numpy.uint8)
    out = numpy.zeros((height,width,3), numpy.uint8)

    points = [(x,y) for x,y,_,_ in pc2.read_points(data)]

    for x,y in ((w(x),h(y)) for x,y in points):
        if x+1 < height and y+1 < width and x >= 0 and y >= 0:
            img[x,y] = 255

    #kernel = numpy.ones((2,2), numpy.uint8)
    #img = cv2.dilate(img, kernel)

    out = cv2.cvtColor(img, cv.CV_GRAY2BGR)

    def dist(l):
        return ((l[0]-l[2])**2 + (l[1]-l[3])**2)

    cvimg = cv.fromarray(img)

    if prev:
        def weight(l):
            return (kweight * uangle((l[2]-l[0], l[3]-l[1]), 
                                     (prev[2]-prev[0], prev[3]-prev[1])) +
                    pweight * sum(1 if p else 0 for p in cv.InitLineIterator(
                                  cvimg, (l[0], l[1]), (l[2], l[3]))))
    else:
        def weight(l):
            return sum(1 if p else 0 for p in cv.InitLineIterator(
                       cvimg, (l[0], l[1]), (l[2], l[3])))


    lines = cv2.HoughLinesP(img, 1, PI/180, 5)

    mline = None


    if len(lines > 0):
        lines = lines[0] 

        lines = [(0, (-x*vy)/vx + y,
                  width-1, ((width-x)*vy)/vx + y) for vx,vy,x,y in
                    ((x1-x0, y1-y0, x0, y0) for x0,y0,x1,y1 in 
                        lines) if vx != 0]

        if len(lines) > 0:
            mline = max(lines, key=weight)


    prev = mline

    # mline now contains our target line
    a = numpy.array([float(mline[0]), float(mline[1])])
    n = numpy.array([float(mline[2]-mline[0]), float(mline[3]-mline[1])])
    n = n/numpy.linalg.norm(n)
    p = (res/2, res)

    # distance
    dist = numpy.subtract(a,p)
    dist = numpy.subtract(dist, numpy.dot(dist, n) * n)
    prevd = numpy.linalg.norm(dist)

    # orientation
    preva = math.atan2(n[1], n[0])

    # pixel array
    kernel = numpy.ones(DIALATE, numpy.uint8)
    img = cv2.dilate(img, kernel)
    lineItr = cv.InitLineIterator(cv.fromarray(img), (mline[0], mline[1]), (mline[2], mline[3]))

    # publish data
    data = WallState()
    data.angle = preva
    data.distance = prevd
    data.wall = [True if p else False for p in lineItr]
  
    global state_pub
    state_pub.publish(data)
    
    global debug
    if debug:
        import sys
        for i in range(len(data.wall)/3):
            p = data.wall[i*3]
            sys.stdout.write('X' if p else ' ')
        print ""
        
        kernel = numpy.ones(DIALATE, numpy.uint8)
        out = cv2.dilate(out, kernel)
        cv2.line(out, (mline[0], mline[1]), (mline[2], mline[3]), (255,0,0), 1)
        
        image_pub.publish(bridge.cv_to_imgmsg(cv.fromarray(out), "bgr8"))


def main():
    rospy.init_node('lidarnav')

    global pweight, kweight
    pweight = float(rospy.get_param('~pweight', 1))
    kweight = float(rospy.get_param('~kweight', 50))

    global debug
    debug = bool(rospy.get_param('~debug'))

    if debug:
        global image_pub
        image_pub = rospy.Publisher('wall/image', Image)
    
    global state_pub
    state_pub = rospy.Publisher('wall/state', WallState)
    
    rospy.Subscriber('cloud', PointCloud2, lidar_cb)

    if debug:
        rospy.spin()
    else:
        while not rospy.is_shutdown():
            rospy.loginfo('line: %s dist: %s ang: %s', prev, prevd, preva)
            rospy.sleep(1)


if __name__ == "__main__":
    main()
