#!/usr/bin/env python
#################
# TI LM4F Launchpad ROS Node. Faciliates communication between 
#    IGVC Framework and the embedded system.
#
# TWIST Message format input, JSON comm between embedded system.
# Broadcasts internal state of LM4F onto a debug channel.
#
# IGVC 2014 IEEE RAS UT Austin
# December 19 2013
# Last Update: January 23 2014
# Kevin Gilbert
#################
import roslib; roslib.load_manifest('ucontroller_tilaunchpad')
import json, serial, sys, os, roslib.packages
import rospy, traceback,subprocess
from std_msgs.msg import String
from geometry_msgs.msg import Twist
##################################
# Node parameters
#################
TOPIC = 'lm4f_debug'
SUBSCRIBER = 'lm4f'
SERIAL_LINE = '/dev/lm4f'
BAUD_RATE = 115200
### LM4F parameters to reflash board on node startup 
rstLm4fcmd = 'make' 
rstLm4fFlag = '-C'
rstLm4fdst = os.path.abspath(os.path.join(os.path.abspath(roslib.packages.get_pkg_dir('ucontroller_tilaunchpad')),'../../../../IGVC2014/embedded/lm4f/lm4f_node/')
)
rstLm4farg = 'flash'
##################################

##################################
##
#    lm4f_handler
######
##
#    Node function placed here
#    Called when data received 
#    from subscriber topic.
##################################
def lm4f_handler(data, pub):
    try:
        comm.flushOutput()
        comm.flushInput()
        # Parse and send data to LM4F
        sendCommand(data) 
        # Read response and print to logs/debug topic
        response = comm.readline()
        comm.flushInput()
        rospy.loginfo(rospy.get_name()+": LM4F response: "+response)      
        pub.publish(response) 
    except:
        rospy.loginfo(traceback.format_exc())
        rospy.loginfo('Closing LM4F Node due to exception...')
        comm.close()
        sys.exit()
##################################

def sendCommand(data):
    linearVelocity = round(data.linear.x, 3) #ignore y,z for linear vel
    angularVelocity = round(data.angular.z, 3) #ignore x,y for ang vel
    # linear velocity in m/s
    # angular velocity in rad/s
    mesg = json.dumps({'SVLX':linearVelocity, 'SVAX':angularVelocity})
    comm.write(mesg+'\n')
    comm.flushOutput()
    return

def lm4fNode():
    pub = rospy.Publisher(TOPIC, String)
    sub = rospy.Subscriber(SUBSCRIBER, Twist, lm4f_handler, pub)
    rospy.init_node('lm4f_node', anonymous=True)
    print 'printing debug info...'
    rospy.spin()

if __name__ == '__main__':
    try:
        comm = serial.Serial(
            port = SERIAL_LINE,
            baudrate = BAUD_RATE,
            timeout = .2,
            writeTimeout = 1
        )
        print 'comm initialized...'
        print 'Flashing board...'
        #process = subprocess.call([rstLm4fcmd,rstLm4fFlag,rstLm4fdst,rstLm4farg])
        #print 'board reset, output: '
        #print process
        lm4fNode()
    except rospy.ROSInterruptException: pass
    except serial.SerialException:
        comm.close()
        print 'comm error'
        sys.exit()
        
